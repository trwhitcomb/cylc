#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys, re
from cylc.cycle_time import ct, CycleTimeError
from optparse import OptionParser

parser = OptionParser( usage = """cylc [util] template [options] STRING [CYCLE] 

Compute cycle time-dependent file names based on template strings, and
print the result to stdout. The base cycle time can be taken from the
environment or the command line, and offsets can be computed a la
'cylc cycletime'. Suite file naming conventions can thus be encoded
in template variables defined in the suite config file.

STRING can be the name of an environment variable containing a template
string OR the template string itself. In the template, 'YYYY', 'MM',
'DD', or 'HH' will be replaced with computed cycle time components.

   $ export CYLC_TASK_CYCLE_TIME=2010082318

   $ cylc template -s 6 fooHH-YYYYMMDD.nc #explicit name convention
  foo12-20100823.nc

   $ export NCONV=fooHH-YYYYMMDD.nc    # (as if from system config file)

   $ cylc template NCONV #.............implicit filename convention
  foo18-20100823.nc
   $ cylc template -s 6 NCONV_FOO #..same, with current cycle offset
  foo12-20100823.nc

Note that 'cylc template NCONV' and 'cylc template $NCONV' will
generate the same result, but the former is preferred so that we can
detect accidental use of undefined environment variables.

Arguments:
   STRING       A template string, or the name of an env variable that
                contains a template.
   CYCLE        (YYYYMMDDHH) defaults to $CYLC_TASK_CYCLE_TIME.""" )

parser.add_option( "-s", "--subtract", metavar="HOURS",
        help="Subtract HOURS from CYCLE", 
        action="store", dest="subtract" )

parser.add_option( "-a", "--add", metavar="HOURS",
        help="Add HOURS to CYCLE", 
        action="store", dest="add" )

parser.add_option( "-o", "--offset", metavar="HOURS",
        help="Apply an offset of +/-HOURS to CYCLE", 
        action="store", dest="offset" )

(options, args) = parser.parse_args()

cycle = None

if len( args ) == 0 or len( args ) > 2:
    parser.error( "Wrong number of arguments!" )

# template string
tmp = args[0]
if tmp in os.environ:
    template = os.environ[ tmp ]
else:
    template = tmp

if len(args) == 2:
    # explicit cycle time
    try:
        cycle = ct( args[1] )
    except CycleTimeError, x:
        raise SystemExit(x)
 
if not cycle:
    # cycle time must be defined in the environment
    if 'CYLC_TASK_CYCLE_TIME' in os.environ:
        try:
            cycle = ct( os.environ[ 'CYLC_TASK_CYCLE_TIME' ] )
        except CycleTimeError, x:
            raise SystemExit(x)
    else:
        parser.error( "no valid cycle time found" )

n_chosen = 0
subtract = False
add = False
offset = False

hours_str = int( cycle.hour ) 

if options.subtract:
    subtract = True
    n_chosen += 1 
    hours_str = int( options.subtract )

if options.add:
    add = True
    n_chosen += 1
    hours_str = int( options.add )

if options.offset:
    offset = True
    n_chosen += 1
    hours_str = int( options.offset )

if n_chosen > 1:
    parser.error( "Choose ZERO or ONE of subtract, add, or offset" )

try:
    hours = int( hours_str )
except ValueError:
    parser.error( "HOURS must be integer" )

if offset:
    if hours < 0:
        subtract = True
        hours = - hours
    else:
        add = True


if add:
    cycle.increment( hours=hours )
elif subtract:
    cycle.decrement( hours=hours )

string = template
# replace YYYYMMDDHH
string = re.sub( "YYYYMMDDHH", cycle.get(), string )
# replace YYYY, MM, DD, HH
string = re.sub( 'YYYY', cycle.year,  string )
string = re.sub( 'MM',   cycle.month,  string )
string = re.sub( 'DD',   cycle.day,  string )
string = re.sub( 'HH',   cycle.hour, string )
# replace YY
string = re.sub( 'YY',   cycle.year[2:4],  string )

print string
