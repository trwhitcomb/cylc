________________________________________________________________________
                                              CYLC SUITE DESIGN OVERVIEW

This is a minimal overview of cylc suite definition, and some general
suite design guidelines. For more information, see the cylc userguide.

____________________________________
SUITE DEFINITION DIRECTORY STRUCTURE

.
├── suite.rc       # suite config file
│ 
└── bin/           # task scripts
    ├── foo.sh
    └── ...
  
In addition, the suite definition directory may contain: 

1/ any number of include-files referred to by the suite.rc file,
at the top level, or in sub-directories as you like.

2/ any other suite-related files or sub-directories (e.g. a
documentation sub-directory); these will be ignored by cylc
but can be accessed by suite tasks via $CYLC_SUITE_DIR, 
and can be version-controlled with the suite definition.

> WHAT GETS RUN WHEN A TASK'S PREREQUISITES ARE READY?

Most tasks, when ready to run, will run a command line specified 
in the suite.rc file, after configuring the task execution environment,
also as specified in the sutie.rc file. The command line may run a
script or executable located in the suite bin directory, or elsewhere,
but simple tasks may be entirely scripted in the suite.rc file,
and multiple tasks with similar functionality can call the same task
script with different input parameters.

Scripts or executables in the suite bin directory are automatically
accessible to the suite (i.e. you don't need to supply the full file
path or configure your $PATH variable).

___________________________________
PROVIDING INPUT PARAMETERS TO TASKS

Cylc tasks can take input from commandline arguments (via the
commandline specified in the suite.rc file) and/or environment variables
which can be defined in the suite.rc global or task-specific environment
sections. Generally speaking, input parameters common to several tasks
should be defined once in the global environment section, and those
specific to a single task can go in the task environment section.

Global environment variables can reference other previously defined
global variables, and task-specific variables can reference global
variables and other task-specific variables previously defined for the
same task (cylc preserves the order of variable definition).

Global and task-specific environment variables, and the command line,
can reference the following special cylc environment variables:
  $CYLC_SUITE         # foo:bar
  $CYLC_SUITE_GROUP   # foo 
  $CYLC_SUITE_NAME    # bar
  $CYLC_SUITE_DIR     # /path/to/suite/definition
  $CYLC_SUITE_OWNER   # username of person running the suite
  $CYLC_DIR           # /path/to/cylc/installation
  $CYLC_SUITE_HOST    # hostname of machine running the suite
  $CYLC_SUITE_PORT    # port (on the suite host) the suite is listening at
  $TASK_ID            # task NAME%YYYYMMDDHH
  $TASK_NAME          # task NAME
  $CYCLE_TIME         # task cycle time (YYYYMMDDHH)

Note that this means even global variables, when evaluated in the execution
environment of a specific task, can be made task-specific.

____________________________________
HANDLING TASK INPUT AND OUTPUT FILES

There are several ways of handling the *real* dependencies - usually
output files generated by one task and used as input files by other
tasks - between tasks in a suite:

 (1) Have all tasks read and write from a common directory. This may be 
 the easiest way to run very small suites. 

 (2) Have task B "know" to read its input from A's output directory, or
 have task A know to write its output to B's input directory. This is
 OK, but not ideal because at least one of these tasks must be
 configured with explicit knowledge of its place in the suite (i.e 
 where it's inputs come from, or where it's outputs will be used, 
 in this particular suite).
 
 (3) Define "middle man" tasks to move files from one task's output
 directory to another's input directory. This is also not ideal because
 although the important tasks can be configured generically there are
 now have extra (albeit simple) tasks that do require knowledge of
 the wider suite. However, such connector tasks can often all call 
 the same back-end task script with differing input parameters defined
 in the suite.rc file alone.

 (4) THE BEST SOLUTION, where possible, is to have tasks read the paths
 to common files and directories from common environment variables
 defined once in the suite.rc file. Tasks can thus be configured as if
 to run standalone and the knowledge of how they interact within the
 context of the suite can be confined to the suite.rc file.

____________________
RUNNING SINGLE TASKS

'cylc submit' runs a single suite task exactly as its parent suite would
run it, in terms of both job submission method and execution
environment. This can be particularly useful when building a new
suite or debugging single tasks.

It is a good idea to ensure that all tasks create their own output
directories if necessary, rather than assuming required directories will
exist due to the action of other suite tasks; this will allow to run 
run single tasks without having to manually create output directories
first. 

# task scripting:
  % mkdir -p $OUTDIR
  % mkdir -p $( dirname $OUTFILE )

# OR using the cylc checkvars utility:
  # 1/ check $OUTDIR is defined and create the directory if necessary:
  % cylcutil checkvars -c OUTDIR 
  # 2/ check $OUTFILE is defined and create its parent directory if nec:
  % cylcutil checkvars -p OUTFILE

