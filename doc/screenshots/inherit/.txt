From: 	Hilary Oliver
To:	David Matthews
CC:	Matthew
Date: 	9/12/2011 1:22 PM
Attachments:	inherit-1.png; inherit-2.png; inherit-3.png; inherit-4.png; inherit-5.png; inherit-6.png; inherit-7.png; suite.rc


Dave & Matt,

Until recently I thought that cylc's lack of "run time grouping of tasks by forecast cycle" would preclude an SMS-style GUI (whatever it is called) with a clear suite-wide collapsible family hierarchy - because such groupings of tasks, in cylc, do not have much to do with the actual order of events at run time, except in the case of simple OPS-style families whose members do all trigger at once.

However, It occurred to me last week that the new runtime inheritance feature solves this problem quite nicely by allowing grouping of tasks however you like at root level, for visualisation purposes, regardless of dependency relationships or shared runtime config.  For instance, in our previous example the OPS and VAR families both inherit config items from GEN, but even if they didn't you could still define a collapsible group called "DA", say,  purely to allow OPS and VAR to collapse into a single umbrella node in the GUI:
 
[runtime]
   [[DA]]
   [[OPS,VAR]]
        inherit = DA
   [[atovs]]
        inherit = OPS
   # ...

The fact that the disparate members of such a family, at run time, may potentially "pass through" the family node at quite different times in the evolution of the suite does not really matter so long as we have effective means of seeing what is going on inside the node.
 
This will be great for monitoring large suites.

Hilary

p.s. see attached suite.rc and screenshots of the family hierarchy.  I've grouped some entirely unrelated post processing tasks into a "post" group ... not saying you'd necessarily want to do that, but it illustrates the point.


