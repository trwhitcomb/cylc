#!/bin/bash

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e; trap "echo 'TEST FAILED (see test-suite.out)'" ERR

usage() {
    echo "USAGE: cylc [admin] test-suite [--help]"
    echo ""
    echo "Run an automated test of core cylc functionality using a new copy of"
    echo "'$CYLC_DIR/examples/admin/test'. This should be used to check that new"
    echo "developments in the cylc codebase have not introduced serious bugs."
    echo "The test runs a suite registered as 'test'; to watch its progress"
    echo "use 'cylc view'. Aside from timing differences results should be the"
    echo "same in live or simulation mode."
    echo
    echo "Currently the test does the following:"
    echo "  - Copies the 'intro' example suite definition directory;"
    echo "  - Registers the new suite as $SUITE_REG;"
    echo "  - Starts the suite at T0=06Z, with task X set to fail at 12Z;"
    echo "  - Unlocks the running suite;"
    echo "  - Sets a stop time at 12Z (i.e. T0+30 hours);"
    echo "  - Waits for the suite to stall as result of X failing;"
    echo "  - Inserts a new coldstart task at 06Z (T0+24 hours);"
    echo "  - Purges the failed X and dependants through to 00Z (T0+18 hours)"
    echo "    inclusive, which allows the suite to get going again at 06Z;"
    echo "  - Waits for the suite to shut itself down at the 12Z stop time."
    echo "  - Run a single task (called prep) from the suite with submit." 
    echo
    echo "Options:"
    echo "  -h, --help   Print this help message and exit."
}

if [[ $# != 0 ]]; then 
    usage
    if [[ $1 == "--help" ]]; then
        exit 0
    else
        echo "ERROR: illegal command line arguments"
        exit 1
    fi
fi

if [[ -z $TMPDIR ]]; then
    echo "ERROR: export TMPDIR before running this script."
fi
mkdir -p $TMPDIR

# seconds since epoch
SSE=$( date +%s )

SUITE_DEF=$CYLC_DIR/examples/admin/test
SUITE_REG=testsuite.$SSE
SUITE_DIR=$TMPDIR/$SUITE_REG

echo -n ">> COPYING $SUITE_DEF and REGISTERING it as $SUITE_REG ... "
cp -r $SUITE_DEF $SUITE_DIR
cylc db reg $SUITE_REG $SUITE_DIR
echo done

# log file for stdout and stderr
OUT=test.out; OUT_SCHED=test-suite.out
rm -f $OUT $OUT_SCHED

# START UP THE TEST SUITE
echo
echo ">> STARTING at 2010010106, with TASK X to FAIL at 2010010112"
export TEST_X_FAIL_TIME=2010010112

# startup errors aren't trapped here because we run cylc in the background
cylc run --debug $SUITE_REG 2010010106 >> $OUT_SCHED 2>&1 &

echo ">> waiting 10 seconds for startup"
for i in {1..10}; do
    sleep 1
    echo -n "."
    cylc ping $SUITE_REG > /dev/null 2>&1 && break
done
echo done
if cylc ping $SUITE_REG; then
    echo ">> Suite started."
else
    echo "ERROR: suite failed to start. Check test-suite.out"
    exit 1
fi

# WAIT FOR ALL TASKS AT 2010010112 TO FINISH 
# at which point the suite is stalled because X failed.
echo
echo ">> WAITING for X%2010010112 to fail"
echo -n "   ."
while true; do
    cylc dump $SUITE_REG | grep 'X, 2010010112, failed' > /dev/null 2>&1 && break
    echo -n .
    sleep 1
done
echo done

echo
echo ">> WAITING for suite to stall at 2010010112 due to failed X"
echo -n "   ."
while true; do
    cylc dump $SUITE_REG | egrep 'running|submitted' > /dev/null 2>&1 || break
    echo -n .
    sleep 1
done
echo done

# SET A STOP TIME OF
echo
echo -n ">> SETTING STOP TIME 2010010212 ..."
cylc stop -f $SUITE_REG 2010010212 >> $OUT 2>&1
echo done

# INSERT A COLDSTART TASK AT 2010010206
echo
echo -n ">> INSERTING a coldstart task at 2010010206 ..."
cylc insert -f $SUITE_REG ColdA%2010010206 >> $OUT 2>&1
cylc insert -f $SUITE_REG ColdB%2010010206 >> $OUT 2>&1
cylc insert -f $SUITE_REG ColdC%2010010206 >> $OUT 2>&1
echo done

# PURGE THE FAILED TASK AND ITS DEPENDANTS THROUGH TO 2010010200
echo
echo ">> PURGING X%2010010112 and all dependents, through to 2010010200"
echo -n "   ... "
cylc purge -f $SUITE_REG X%2010010112 2010010200 >> $OUT 2>&1
echo done

# WAIT FOR THE SUITE TO FINISH AT 2010010212
echo
echo ">> WAITING for the suite to shut down"
echo -n "   ."
while true; do
    cylc ping $SUITE_REG > /dev/null || break
    echo -n .
    sleep 1
done
echo done

# did it shut down for the right reasons? check suite log:
REASON=$( cylc log $SUITE_REG | tail -2 | head -1 | sed -e 's/.*- //' )
if [[ $REASON != 'ALL TASKS FINISHED OR HELD' ]]; then
    echo "ERROR, the suite seems to have shut down for the wrong reasons:"
    echo "Here's the last 10 lines of the suite log:"
    cylc log $SUITE_REG | tail -10
    exit 1
fi

echo "Reason for shutdown: $REASON"

# RUN A SINGLE TASK
# can be one that completes successfully or fails, it doesn't matter.
echo
# PARSE OUTPUT FROM submit TO GET JOB LOG FILES:
echo ">> RUN A SINGLE TASK (prep%2010010106) from the suite"
FOO=$(cylc submit $SUITE_REG prep%2010010106 )
STDOUT=$( echo $FOO | sed -e 's/.*1>//' | sed -e 's/ 2>.*//' )
STDERR=$( echo $FOO | sed -e 's/.*2>//' | sed -e 's/ &.*$//' )
echo "TASK OUTPUT LOGS:"
echo "  $STDOUT"
echo "  $STDERR"
echo -n "   ."
while true; do
    egrep 'cylc \(submit.*\): prep%2010010106 succeeded' $STDOUT 2> /dev/null && break
    echo -n .
    sleep 1
done
echo done

# FINISHED
echo 
echo ">> TEST OUTPUT LOGS:"
ls -l $OUT $OUT_SCHED
echo ">> CYLC SUITE LOG FOR THE TEST:"
ls -l $( cylc log $SUITE_REG -p )

# UNREGISTER THE test SUITE and DELETE the suite definition
echo
echo -n ">> UNREGISTERING suite test ..."
cylc unregister --delete -f $SUITE_REG >> $OUT 2>&1
echo done

echo
echo ">> DONE"
