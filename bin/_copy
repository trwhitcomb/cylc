#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, re, sys
from shutil import copytree
from optparse import OptionParser
from cylc.mkdir_p import mkdir_p
from cylc.registration import delimiter, delimiter_re, localdb, \
        centraldb, RegistrationError, SuiteTakenError, DatabaseLockedError

parser = OptionParser( usage = """cylc [db] copy|cp [OPTIONS] SOURCE TARGET TOPDIR

Make copies of suites, or groups of suites, in your private database
(to get copies of suites in the central database use 'cylc import'). 

Cylc suites have hierarchical "registration names" that are analogous to
file paths in a directory tree (but which are not necessarily related to
the actual directory paths in which the suite definitions are stored!).
Consider the following three suites:

% cylc db print '^foo'     # printed in flat form
foo.bag     | "Test Suite Zero" | /tmp/oliverh/zero
foo.bar.waz | "Test Suite Two"  | /tmp/oliverh/two
foo.bar.baz | "Test Suite One"  | /tmp/oliverh/one

% cylc db print -t '^foo'  # printed in tree from
foo      
 |-bag    "Test Suite Zero" | /tmp/oliverh/zero
 `-bar   
   |-baz  "Test Suite One"  | /tmp/oliverh/one
   `-waz  "Test Suite Two"  | /tmp/oliverh/two

These suites are stored in a flat directory structure under $TMPDIR, but
they are organised in the suite database as a group 'foo' that contains
the suite 'foo.bag' and a group 'foo.bar', which in turn contains the
suites 'foo.bar.baz' and 'foo.bar.waz'.

When you copy suites with this command, the target registration names
are determined by TARGET and the name structure underneath SOURCE, and
the suite definition directories are copied into a directory tree under
TOPDIR whose structure reflects the target registration names. If this
is not what you want, you can copy suite definition directories manually
and then register the copied directories manually with 'cylc register'.

EXAMPLES (using the three suites above):

% cylc db copy foo.bar.baz red $TMPDIR       # suite to suite
  Copying suite definition for red
% cylc db print '^red'
  red | "Test Suite One" | /tmp/oliverh/red

% cylc copy foo.bar.baz blue.green $TMPDIR   # suite to group
  Copying suite definition for blue.green
% cylc db pr '^blue'
  blue.green | "Test Suite One" | /tmp/oliverh/blue/green

% cylc copy foo.bar orange $TMPDIR           # group to group
  Copying suite definition for orange.waz
  Copying suite definition for orange.baz
% cylc db pr '^orange'
  orange.waz | "Test Suite Two" | /tmp/oliverh/orange/waz
  orange.baz | "Test Suite One" | /tmp/oliverh/orange/baz

Arguments:
    SOURCE - Source suite or group
    TARGET - Target suite or group
    TOPDIR - Destination for copied suite definition directories""" )

parser.add_option( "-v","--verbose",
        help="Print extra information.",
        action="store_true", default=False, dest="verbose" )

# hidden arguments for import from and export to central db
c_import = False
c_export = False
if '--import' in sys.argv:
    c_import = True
    sys.argv.remove( '--import' ) 
elif '--export' in sys.argv:
    c_export = True
    sys.argv.remove( '--export' ) 
    
( options, args ) = parser.parse_args()

if len(args) != 3:
    parser.error('Wrong number of arguments')

# strip registration delimiter off the end, in case the user left it on
# to indicate a group (which is not necessary, but may seem sensible).
arg_from = args[0].rstrip(delimiter)
arg_to = args[1].rstrip(delimiter)
arg_dir = args[2]

if c_import:
    sourcedb = centraldb( verbose=options.verbose )
    targetdb = localdb( verbose=options.verbose )
elif c_export:
    sourcedb = localdb( verbose=options.verbose )
    targetdb = centraldb( verbose=options.verbose )
else:
    sourcedb = localdb( verbose=options.verbose )
    targetdb = sourcedb

try:
    if c_import or c_export:
        targetdb.lock()
        targetdb.load_from_file()
    else:
        sourcedb.lock()
    sourcedb.load_from_file()

    flist = sourcedb.get_list( '^' + arg_from + r'\b' )
    if len(flist) == 0:
        raise RegistrationError, 'ERROR, no suites matched: ' + arg_from

    for item in flist:
        freg, fdir, ftitle = item
         # if freg is aliased, get the target suite definition dir
        fdir, junk = sourcedb.get( freg )

        treg = re.sub( r'\b' + arg_from + r'\b', arg_to, freg ) 

        tdir = '/'.join( treg.split(delimiter) )
        tdir = os.path.join( arg_dir, tdir )

        if os.path.exists( tdir ):
            print >> sys.stderr, 'SKIPPING, directory already exists: ' + tdir
            continue

        tdir = os.path.abspath( tdir )
        #print 'Making directory ', tdir
        try:
            mkdir_p( os.path.dirname(tdir))
        except Exception,x:
            print >> sys.stderr, x
            continue

        print 'COPY', fdir, '\n  TO', tdir 
        try:
            copytree( fdir, tdir )
        except OSError, x:
            print >> sys.stderr,x
            continue

        try:
            targetdb.register( treg, tdir )
        except SuiteTakenError, x:
            print >> sys.stderr, 'ERROR, ' + str(x)
            continue

    targetdb.dump_to_file()
    targetdb.unlock()
    if c_import or c_export:
        sourcedb.unlock()

except DatabaseLockedError, x:
    raise SystemExit(x)
except RegistrationError, x:
    print >> sys.stderr, x
    targetdb.unlock()
    if c_import or c_export:
        sourcedb.unlock()
    sys.exit(1)
