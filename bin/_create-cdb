#!/bin/bash

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

usage() {
    echo ""
    echo "USAGE: cylc [admin] create-cdb"
    echo ""
    echo "This command is used by the cylc administrator to create the central"
    echo "suite database immediately after installing cylc, or to upgrade the"
    echo "centrally held cylc example suites after upgrading to a new version."
    echo ""
    echo "The example suites are registered with the cylc version number in "
    echo "the registration path so that multiple versions can be retained."
    echo ""
    echo "Seconds since epoch are also appended to the cylc version number to"
    echo "allow multiple uploads at the same cylc version (in case the examples"
    echo "need to be modified). You can then rename the uploaded examples group"
    echo "and unregister any older uploads if necessary."
    echo ""
}

if [[ $1 == '-h' ]] || [[ $1 == '--help' ]]; then
    usage
    exit 0
fi

if [[ -z $CYLC_DIR ]]; then
    echo "\$CYLC_DIR is not defined. Run this script via the cylc main"
    echo "command interface: 'cylc admin create-cdb'"
    exit 1
fi

override=false
if [[ $CYLC_ADMIN_OVERRIDE ]]; then
    # HIDDEN OVERRIDE FOR USER GUIDE
    override=true
    CYLC_VERSION=x.y.z
    TOP=cylc-$( echo $CYLC_VERSION | tr '.' '-' )
else
    CYLC_VERSION=$( cylc -v )
    if [[ $CYLC_VERSION == "THIS IS NOT A VERSIONED RELEASE" ]]; then
        # we are in a cylc git repository - get most recent tag
        CYLC_VERSION=$( git tag | tail -1 )X
    fi
    SSE=$( date +%s )
    TOP=cylc-$( echo $CYLC_VERSION | tr '.' '-' )-$SSE
fi

echo " + Registering example suites"
cd $CYLC_DIR/examples
SUITE_RCS=$( find . -name suite.rc | sed -e 's@./@@' )
for SUITE_RC in $SUITE_RCS; do
    SUITE_DEF_DIR=$( dirname $SUITE_RC )
    SUITE_REG_NAME=${TOP}.$( echo $SUITE_DEF_DIR | tr '/' '.' )
    cylc db register $SUITE_REG_NAME $SUITE_DEF_DIR
done

echo " + Exporting examples to the central database"
# This will create the new database file if necessary.
cylc export $TOP

$override && exit 0

echo " + Unregistering the originals in your private database"
# We don't want the admin user accidentally modifying the originals.
cylc unregister $TOP

echo " + Importing copies of examples to your private database"
# We don't want the admin user accidentally modifying the originals.
cylc import ${USER}.$TOP $TOP $TMPDIR

# Determine CDB directory location
# The following no longer works (see comment in lib/cylc/__init__.py)
# CDB=$(python -c 'from cylc.conf.CylcGlobals import central_regdb_dir; print central_regdb_dir')
# Use new secret command instead:
CDB=$(cylc print-cdb-dir)

echo " + Setting central database permissions: $CDB"

# Make the central db writeable by all.
# (could be just g+w if all cylc users are in the same group).
chmod go+rwx $CDB
chmod go+rw $CDB/db

echo
echo "______________________________________________________________________"
echo "NOTE: the example suites have been registered with seconds since epoch"
echo "appended to the cylc version group name: $TOP"
echo "This is to ensure uniqueness in case you modify the example suites and"
echo "upload them again at the same cylc version. You may want to reregister"
echo "the group to plain cylc-$CYLC_VERSION after deleting older uploads."
echo "----------------------------------------------------------------------"
echo
echo

echo "DONE"
