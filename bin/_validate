#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.job_submission.job_submit import job_submit
from optparse import OptionParser
from cylc.registration import dbgetter, RegistrationError
from cylc.config import config, SuiteConfigError
from cylc.taskdef import DefinitionError

parser = OptionParser( """cylc [prep] validate [options] SUITE

(a) Parse and validate a suite config (suite.rc) file to check that
all entries conform to the $CYLC_DIR/conf/suiterc.spec specification.
(b) Attempt to instantiate a proxy object for each task in the suite.

IF THE SUITE.RC FILE USES INCLUDE-FILES: line numbers reported with 
validation errors will be wrong because the parser sees an inlined
version of the file. You can use 'cylc prep inline SUITE' to trace errors to
the correct source line, although the extra information reported by the
validator should be sufficient to make this unnecessary.

Arguments:
   SUITE    - Suite database registration.""")

parser.add_option( "-c", "--central", 
        help="target the central database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "-p","--pretty",
        help="Use unicode box drawing characters when printing "
        "the suite runtime inheritance hierarchy.",
        action="store_true", default=False, dest="pretty" )

parser.add_option( "-v","--verbose",
        help="Print extra information from the validation process.",
        action="store_true", default=False, dest="verbose" )

(options, args) = parser.parse_args()

if len(args) != 1:
    parser.error( "Wrong number or arguments" )

reg = args[0]

dbg = dbgetter( options.central )
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

if options.verbose:
    print "Parsing Suite Definition"
try:
    config = config( suite, suiterc, verbose=options.verbose )
except SuiteConfigError,x:
    raise SystemExit(x)

# Now instantiate each task
# TO DO: TEST THE FOLLOWING WITH VARIOUS ERRORS AND CLEAN UP
# THE RESULTING OUTPUT:
job_submit.cylc_env = {}
ctime = '2999010112'

if options.verbose:
    print 'Instantiating Task Proxies:'

valid = True
result = {}
for tn in config.get_full_task_name_list():
    try:
        # tasks used in the suite dependency graph
        task_proxy = config.get_task_proxy( tn, ctime, 'waiting', stopctime=None, startup=True )
    except SuiteConfigError or DefinitionError,x:
        result[tn] = False, x
        valid = False
    except KeyError, x:
        # task not used (not in graph - already warned above)
        try:
            # tasks defined but not used in the suite graph
            task_proxy = config.get_task_proxy_raw( tn, ctime, 'waiting', stopctime=None, startup=True, test=True, strict=False )
        except SuiteConfigError or DefinitionError, x:
            result[tn] = False, x
            valid = False
        else:
            result[tn] = True, 'OK'
    else:
        result[tn] = True, 'OK'

if options.verbose:
    config.print_inheritance_tree( labels=result, pretty=options.pretty )

if valid:
    print "Suite " + suite + " validates OK."
else:
    raise SystemExit( "ERROR: Suite validation failed (errors detected)" )
