#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, re, sys
from optparse import OptionParser
from cylc.registration import delimiter, dbgetter, \
    RegistrationError, DatabaseLockedError, SuiteTitleNotFoundError
from cylc.config import config, SuiteConfigError

parser = OptionParser( usage = """cylc [db] refresh [options] SUITE

Check a suite database for invalid registrations (no suite definition 
directory or suite.rc file) and refresh suite titles in case they have
changed since the suite was registered (for the central database this
also updates the titles of suites owned by others).

Arguments:
    SUITE      - suite name, or match pattern""" )

parser.add_option( "-c","--central",
        help="Print suite registrations from the central database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "-u","--unregister",
        help="Automatically unregister invalid registrations.",
        action="store_true", default=False, dest="unregister" )

parser.add_option( "-v","--verbose",
        help="Print extra information.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

db = dbgetter(central=options.central, verbose=options.verbose).db

if len(args) == 0:
    pattern = None
elif len(args) == 1:
    pattern = args[0]
else:
    parser.error( "Wrong number of arguments")

if options.central:
    # only allow users to refresh their own suites
    owner = os.environ['USER']
    if not pattern:
        pattern = owner + delimiter
    else:
        if not pattern.startswith( owner + delimiter ):
            pattern = owner + delimiter + pattern

invalid = []    # no suite.rc file
readerror = []  # can't read title (suite.rc parse error)
try:
    db.lock()
    db.load_from_file()
    # check validity
    invalid = db.get_invalid()
    # refresh titles
    changed = []
    items = db.get_list( pattern ) 
    if len(items) == 0:
        if pattern:
            print 'No suites found to match', pattern
        else:
            print 'No suites found'
    for suite, dir, title in items:
        if suite in invalid:
            continue
        try:
            db.refresh_suite_title( suite )
        except (RegistrationError, SuiteConfigError), x:
            print >> sys.stderr, x
            readerror.append(suite)
    if len(invalid) > 0:
        print 'ERROR,', len(invalid), 'invalid registrations (no suite.rc file):'
        for i in invalid:
            if options.unregister:
                db.unregister(i)
            else:
                print ' -', i
    if len(readerror) > 0:
        print 'ERROR,', len(readerror), 'title parse failures (bad suite.rc file):'
        for i in readerror:
            print ' -', i

    db.dump_to_file()
    db.unlock()

except DatabaseLockedError, x:
    raise SystemExit(x)
except RegistrationError, x:
    print >> sys.stderr, x
    db.unlock()
    sys.exit(1)

