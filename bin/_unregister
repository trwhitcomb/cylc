#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from shutil import rmtree
from optparse import OptionParser
from cylc.registration import localdb, centraldb, RegistrationError, DatabaseLockedError

parser = OptionParser( usage = """cylc [db] unregister [OPTIONS] SUITE

Unregister suites from your private database, or remove your suites from
the central suite database. This does not delete the corresponding suite
definition directories unless you use the '--delete' option.

If you accidentally unregister a running suite, just register it again 
under the original name to regain access to it.

Arguments:
    SUITE - suite or group name, or filter expression.""" )

parser.add_option( "-d", "--delete",
        help="Delete the suite definition directory too (!DANGEROUS!).",
        action="store_true", default=False, dest="obliterate" )

parser.add_option( "-f", "--force",
        help="Don't ask for confirmation before deleting suites.",
        action="store_true", default=False, dest="force" )

parser.add_option( "-c", "--central",
        help="Target the central suite database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "--dry-run",
        help="Just show what I would do.",
        action="store_true", default=False, dest="dryrun" )

parser.add_option( "--filter",
        help="A filtering regular expression. This must be explicitly "
        "indicated for unregistering, for safety reasons. ",
        action="store_true", default=False, dest="regfilter" )

parser.add_option( "-v","--verbose",
        help="Print extra information.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error( "Wrong number of arguments" )

arg = args[0]

if options.central:
    db = centraldb( verbose=options.verbose )
else:
    db = localdb( verbose=options.verbose )

try:
    if not options.dryrun:
        db.lock()
    else:
        print "This is DRY RUN - reported actions will not take effect:\n"
    db.load_from_file()
    dirs = db.unregister( arg, regfilter=options.regfilter )
    if not options.dryrun:
        db.dump_to_file()
        db.unlock()

except DatabaseLockedError, x:
    raise SystemExit(x)
except RegistrationError, x:
    print >> sys.stderr, x
    if not options.dryrun:
        db.unlock()
    sys.exit(1)

# TO DO: should this be inside the db lock in the case of
# central copied registrations (probably not).
n = len(dirs)
if n == 0:
    print 'No suites unregistered.'
    sys.exit(0)

print len(dirs), 'suites unregistered.'

for dir in dirs:
    if dir.startswith('->'):
        # this is an alias; don't delete the original directory.
        dirs.remove( dir )

if options.obliterate and len(dirs) > 0:
    for dir in dirs:
        print 'DELETE ', dir

    if options.dryrun:
        sys.exit(0)

    really_obliterate = False
    if options.force:
        really_obliterate = True
    else:
        response = raw_input( "DO YOU REALLY WANT TO DELETE THESE SUITE DEFINITIONS? (y/n) " )
        if response == 'y':
            really_obliterate = True
    if really_obliterate and len(dirs)>0:
        for dir in dirs:
            try:
                rmtree(dir)
            except OSError, x:
                print >> sys.stderr, "ERROR, could not remove directory: " + dir
                #print >> sys.stderr, x
            # recursively remove empty superdirs
            tmp = dir
            while True:
                tmp = os.path.split(tmp)[0]
                try:
                    os.rmdir(tmp)
                except OSError:
                    break
                else:
                    print 'Removed empty directory:', tmp

